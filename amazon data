{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOvs3YQBXr18pnb4IIUOc1K",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Dhruvd910/Analysis-/blob/main/amazon%20data\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "RHOR2Lo7zJ0J"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv('/Amazon Sale Report.csv')"
      ],
      "metadata": {
        "id": "kNX2UqHG0Y6D"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gFt7yyN-zyUa",
        "outputId": "53652979-38db-4597-fb7b-8082f877a675"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(28381, 21)"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 463
        },
        "id": "0goNZHy-2_gH",
        "outputId": "823339ad-05ae-4a5f-9cac-508d0ec830fc"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   index             Order ID      Date                        Status  \\\n",
              "0      0  405-8078784-5731545  04-30-22                     Cancelled   \n",
              "1      1  171-9198151-1101146  04-30-22  Shipped - Delivered to Buyer   \n",
              "2      2  404-0687676-7273146  04-30-22                       Shipped   \n",
              "3      3  403-9615377-8133951  04-30-22                     Cancelled   \n",
              "4      4  407-1069790-7240320  04-30-22                       Shipped   \n",
              "\n",
              "  Fulfilment Sales Channel ship-service-level  Category Size Courier Status  \\\n",
              "0   Merchant     Amazon.in           Standard   T-shirt    S     On the Way   \n",
              "1   Merchant     Amazon.in           Standard     Shirt  3XL        Shipped   \n",
              "2     Amazon     Amazon.in          Expedited     Shirt   XL        Shipped   \n",
              "3   Merchant     Amazon.in           Standard   Blazzer    L     On the Way   \n",
              "4     Amazon     Amazon.in          Expedited  Trousers  3XL        Shipped   \n",
              "\n",
              "   ...  currency  Amount    ship-city   ship-state ship-postal-code  \\\n",
              "0  ...       INR  647.62       MUMBAI  MAHARASHTRA         400081.0   \n",
              "1  ...       INR  406.00    BENGALURU    KARNATAKA         560085.0   \n",
              "2  ...       INR  329.00  NAVI MUMBAI  MAHARASHTRA         410210.0   \n",
              "3  ...       INR  753.33   PUDUCHERRY   PUDUCHERRY         605008.0   \n",
              "4  ...       INR  574.00      CHENNAI   TAMIL NADU         600073.0   \n",
              "\n",
              "   ship-country    B2B fulfilled-by New  PendingS  \n",
              "0            IN  False    Easy Ship NaN       NaN  \n",
              "1            IN  False    Easy Ship NaN       NaN  \n",
              "2            IN   True          NaN NaN       NaN  \n",
              "3            IN  False    Easy Ship NaN       NaN  \n",
              "4            IN  False          NaN NaN       NaN  \n",
              "\n",
              "[5 rows x 21 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-866cf869-2e11-4b49-8c64-40b44613f5e4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>Order ID</th>\n",
              "      <th>Date</th>\n",
              "      <th>Status</th>\n",
              "      <th>Fulfilment</th>\n",
              "      <th>Sales Channel</th>\n",
              "      <th>ship-service-level</th>\n",
              "      <th>Category</th>\n",
              "      <th>Size</th>\n",
              "      <th>Courier Status</th>\n",
              "      <th>...</th>\n",
              "      <th>currency</th>\n",
              "      <th>Amount</th>\n",
              "      <th>ship-city</th>\n",
              "      <th>ship-state</th>\n",
              "      <th>ship-postal-code</th>\n",
              "      <th>ship-country</th>\n",
              "      <th>B2B</th>\n",
              "      <th>fulfilled-by</th>\n",
              "      <th>New</th>\n",
              "      <th>PendingS</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>405-8078784-5731545</td>\n",
              "      <td>04-30-22</td>\n",
              "      <td>Cancelled</td>\n",
              "      <td>Merchant</td>\n",
              "      <td>Amazon.in</td>\n",
              "      <td>Standard</td>\n",
              "      <td>T-shirt</td>\n",
              "      <td>S</td>\n",
              "      <td>On the Way</td>\n",
              "      <td>...</td>\n",
              "      <td>INR</td>\n",
              "      <td>647.62</td>\n",
              "      <td>MUMBAI</td>\n",
              "      <td>MAHARASHTRA</td>\n",
              "      <td>400081.0</td>\n",
              "      <td>IN</td>\n",
              "      <td>False</td>\n",
              "      <td>Easy Ship</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>171-9198151-1101146</td>\n",
              "      <td>04-30-22</td>\n",
              "      <td>Shipped - Delivered to Buyer</td>\n",
              "      <td>Merchant</td>\n",
              "      <td>Amazon.in</td>\n",
              "      <td>Standard</td>\n",
              "      <td>Shirt</td>\n",
              "      <td>3XL</td>\n",
              "      <td>Shipped</td>\n",
              "      <td>...</td>\n",
              "      <td>INR</td>\n",
              "      <td>406.00</td>\n",
              "      <td>BENGALURU</td>\n",
              "      <td>KARNATAKA</td>\n",
              "      <td>560085.0</td>\n",
              "      <td>IN</td>\n",
              "      <td>False</td>\n",
              "      <td>Easy Ship</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>404-0687676-7273146</td>\n",
              "      <td>04-30-22</td>\n",
              "      <td>Shipped</td>\n",
              "      <td>Amazon</td>\n",
              "      <td>Amazon.in</td>\n",
              "      <td>Expedited</td>\n",
              "      <td>Shirt</td>\n",
              "      <td>XL</td>\n",
              "      <td>Shipped</td>\n",
              "      <td>...</td>\n",
              "      <td>INR</td>\n",
              "      <td>329.00</td>\n",
              "      <td>NAVI MUMBAI</td>\n",
              "      <td>MAHARASHTRA</td>\n",
              "      <td>410210.0</td>\n",
              "      <td>IN</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>403-9615377-8133951</td>\n",
              "      <td>04-30-22</td>\n",
              "      <td>Cancelled</td>\n",
              "      <td>Merchant</td>\n",
              "      <td>Amazon.in</td>\n",
              "      <td>Standard</td>\n",
              "      <td>Blazzer</td>\n",
              "      <td>L</td>\n",
              "      <td>On the Way</td>\n",
              "      <td>...</td>\n",
              "      <td>INR</td>\n",
              "      <td>753.33</td>\n",
              "      <td>PUDUCHERRY</td>\n",
              "      <td>PUDUCHERRY</td>\n",
              "      <td>605008.0</td>\n",
              "      <td>IN</td>\n",
              "      <td>False</td>\n",
              "      <td>Easy Ship</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>407-1069790-7240320</td>\n",
              "      <td>04-30-22</td>\n",
              "      <td>Shipped</td>\n",
              "      <td>Amazon</td>\n",
              "      <td>Amazon.in</td>\n",
              "      <td>Expedited</td>\n",
              "      <td>Trousers</td>\n",
              "      <td>3XL</td>\n",
              "      <td>Shipped</td>\n",
              "      <td>...</td>\n",
              "      <td>INR</td>\n",
              "      <td>574.00</td>\n",
              "      <td>CHENNAI</td>\n",
              "      <td>TAMIL NADU</td>\n",
              "      <td>600073.0</td>\n",
              "      <td>IN</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 21 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-866cf869-2e11-4b49-8c64-40b44613f5e4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-866cf869-2e11-4b49-8c64-40b44613f5e4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-866cf869-2e11-4b49-8c64-40b44613f5e4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cf87df1f-5f5c-48ea-b045-710f07085848\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cf87df1f-5f5c-48ea-b045-710f07085848')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cf87df1f-5f5c-48ea-b045-710f07085848 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fRr5fh0O3Cvs",
        "outputId": "47cd45c0-a59b-47b2-e69e-72ffe4f2bd69"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 28381 entries, 0 to 28380\n",
            "Data columns (total 21 columns):\n",
            " #   Column              Non-Null Count  Dtype  \n",
            "---  ------              --------------  -----  \n",
            " 0   index               28381 non-null  int64  \n",
            " 1   Order ID            28381 non-null  object \n",
            " 2   Date                28381 non-null  object \n",
            " 3   Status              28381 non-null  object \n",
            " 4   Fulfilment          28380 non-null  object \n",
            " 5   Sales Channel       28380 non-null  object \n",
            " 6   ship-service-level  28380 non-null  object \n",
            " 7   Category            28380 non-null  object \n",
            " 8   Size                28380 non-null  object \n",
            " 9   Courier Status      28380 non-null  object \n",
            " 10  Qty                 28380 non-null  float64\n",
            " 11  currency            26627 non-null  object \n",
            " 12  Amount              26627 non-null  float64\n",
            " 13  ship-city           28368 non-null  object \n",
            " 14  ship-state          28368 non-null  object \n",
            " 15  ship-postal-code    28368 non-null  float64\n",
            " 16  ship-country        28368 non-null  object \n",
            " 17  B2B                 28380 non-null  object \n",
            " 18  fulfilled-by        10147 non-null  object \n",
            " 19  New                 0 non-null      float64\n",
            " 20  PendingS            0 non-null      float64\n",
            "dtypes: float64(5), int64(1), object(15)\n",
            "memory usage: 4.5+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#drop unwanted/blank columns\n",
        "data.drop(['New','PendingS'],axis=1,inplace=True)"
      ],
      "metadata": {
        "id": "eMuxRN2Z3MOR"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#for checking is there any null value\n",
        "pd.isnull(data)"
      ],
      "metadata": {
        "id": "YmTNopBy3yVy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#remove null values\n",
        "data.dropna(inplace=True)"
      ],
      "metadata": {
        "id": "Bib71At24EX9"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Or2v1Jm-44GT",
        "outputId": "e1dcee52-c1ac-461b-b437-faa00931f4eb"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['index', 'Order ID', 'Date', 'Status', 'Fulfilment', 'Sales Channel',\n",
              "       'ship-service-level', 'Category', 'Size', 'Courier Status', 'Qty',\n",
              "       'currency', 'Amount', 'ship-city', 'ship-state', 'ship-postal-code',\n",
              "       'ship-country', 'B2B', 'fulfilled-by'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from datetime import date\n",
        "#change the datatype\n",
        "data['ship-postal-code']=data['ship-postal-code'].astype('int')\n",
        "data['Date']=pd.to_datetime (data['Date'])\n"
      ],
      "metadata": {
        "id": "F79Sh7FU4lm-"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.rename(columns={'Qty':'Quantity'},inplace=True)"
      ],
      "metadata": {
        "id": "ukQx4OGC5YCY"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7Fz1Jf127Yxs",
        "outputId": "bbfd0e88-2ed2-4651-97fa-cecb53cb0d57"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['index', 'Order ID', 'Date', 'Status', 'Fulfilment', 'Sales Channel',\n",
              "       'ship-service-level', 'Category', 'Size', 'Courier Status', 'Quantity',\n",
              "       'currency', 'Amount', 'ship-city', 'ship-state', 'ship-postal-code',\n",
              "       'ship-country', 'B2B', 'fulfilled-by'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#it is only for integers type\n",
        "data.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "pXsrLidY7lMD",
        "outputId": "36d800ed-3835-4363-c6c8-33b63e168d98"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              index     Quantity       Amount  ship-postal-code\n",
              "count   9695.000000  9695.000000  9695.000000       9695.000000\n",
              "mean   14075.201753     0.865704   607.620619     457621.987313\n",
              "std     7756.362011     0.354631   276.123779     197854.471791\n",
              "min        0.000000     0.000000     0.000000     110001.000000\n",
              "25%     7281.500000     1.000000   419.000000     322768.500000\n",
              "50%    13931.000000     1.000000   568.000000     491995.000000\n",
              "75%    20727.500000     1.000000   725.000000     600013.000000\n",
              "max    28376.000000     5.000000  5495.000000     989898.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7f71fb83-f695-4bed-85d1-dd3ffcbbede5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>Quantity</th>\n",
              "      <th>Amount</th>\n",
              "      <th>ship-postal-code</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>9695.000000</td>\n",
              "      <td>9695.000000</td>\n",
              "      <td>9695.000000</td>\n",
              "      <td>9695.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>14075.201753</td>\n",
              "      <td>0.865704</td>\n",
              "      <td>607.620619</td>\n",
              "      <td>457621.987313</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>7756.362011</td>\n",
              "      <td>0.354631</td>\n",
              "      <td>276.123779</td>\n",
              "      <td>197854.471791</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>110001.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>7281.500000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>419.000000</td>\n",
              "      <td>322768.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>13931.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>568.000000</td>\n",
              "      <td>491995.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>20727.500000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>725.000000</td>\n",
              "      <td>600013.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>28376.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>5495.000000</td>\n",
              "      <td>989898.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7f71fb83-f695-4bed-85d1-dd3ffcbbede5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7f71fb83-f695-4bed-85d1-dd3ffcbbede5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7f71fb83-f695-4bed-85d1-dd3ffcbbede5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d92ea98f-ebcd-47cb-bc5c-9f3d365a66a7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d92ea98f-ebcd-47cb-bc5c-9f3d365a66a7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d92ea98f-ebcd-47cb-bc5c-9f3d365a66a7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#include object also\n",
        "data.describe(include='object')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "id": "RC4TsSq07oxl",
        "outputId": "c71e0e81-aea1-400a-f604-04398a4bf8ed"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                   Order ID                        Status Fulfilment  \\\n",
              "count                  9695                          9695       9695   \n",
              "unique                 8831                             7          1   \n",
              "top     408-3317403-1729937  Shipped - Delivered to Buyer   Merchant   \n",
              "freq                     10                          7786       9695   \n",
              "\n",
              "       Sales Channel ship-service-level Category  Size Courier Status  \\\n",
              "count           9695               9695     9695  9695           9695   \n",
              "unique             1                  1        8    10              2   \n",
              "top        Amazon.in           Standard    Shirt     M        Shipped   \n",
              "freq            9695               9695     4217  1875           8360   \n",
              "\n",
              "       currency  ship-city   ship-state ship-country    B2B fulfilled-by  \n",
              "count      9695       9695         9695         9695   9695         9695  \n",
              "unique        1       1982           48            1      2            1  \n",
              "top         INR  BENGALURU  MAHARASHTRA           IN  False    Easy Ship  \n",
              "freq       9695        700         1642         9695   9602         9695  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a276bebc-deb4-466d-a051-7e7952bb8f95\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Order ID</th>\n",
              "      <th>Status</th>\n",
              "      <th>Fulfilment</th>\n",
              "      <th>Sales Channel</th>\n",
              "      <th>ship-service-level</th>\n",
              "      <th>Category</th>\n",
              "      <th>Size</th>\n",
              "      <th>Courier Status</th>\n",
              "      <th>currency</th>\n",
              "      <th>ship-city</th>\n",
              "      <th>ship-state</th>\n",
              "      <th>ship-country</th>\n",
              "      <th>B2B</th>\n",
              "      <th>fulfilled-by</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>9695</td>\n",
              "      <td>9695</td>\n",
              "      <td>9695</td>\n",
              "      <td>9695</td>\n",
              "      <td>9695</td>\n",
              "      <td>9695</td>\n",
              "      <td>9695</td>\n",
              "      <td>9695</td>\n",
              "      <td>9695</td>\n",
              "      <td>9695</td>\n",
              "      <td>9695</td>\n",
              "      <td>9695</td>\n",
              "      <td>9695</td>\n",
              "      <td>9695</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>8831</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>8</td>\n",
              "      <td>10</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1982</td>\n",
              "      <td>48</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>408-3317403-1729937</td>\n",
              "      <td>Shipped - Delivered to Buyer</td>\n",
              "      <td>Merchant</td>\n",
              "      <td>Amazon.in</td>\n",
              "      <td>Standard</td>\n",
              "      <td>Shirt</td>\n",
              "      <td>M</td>\n",
              "      <td>Shipped</td>\n",
              "      <td>INR</td>\n",
              "      <td>BENGALURU</td>\n",
              "      <td>MAHARASHTRA</td>\n",
              "      <td>IN</td>\n",
              "      <td>False</td>\n",
              "      <td>Easy Ship</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>10</td>\n",
              "      <td>7786</td>\n",
              "      <td>9695</td>\n",
              "      <td>9695</td>\n",
              "      <td>9695</td>\n",
              "      <td>4217</td>\n",
              "      <td>1875</td>\n",
              "      <td>8360</td>\n",
              "      <td>9695</td>\n",
              "      <td>700</td>\n",
              "      <td>1642</td>\n",
              "      <td>9695</td>\n",
              "      <td>9602</td>\n",
              "      <td>9695</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a276bebc-deb4-466d-a051-7e7952bb8f95')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a276bebc-deb4-466d-a051-7e7952bb8f95 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a276bebc-deb4-466d-a051-7e7952bb8f95');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-045efe39-c8d8-4eb7-b30e-5c805be9a2b6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-045efe39-c8d8-4eb7-b30e-5c805be9a2b6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-045efe39-c8d8-4eb7-b30e-5c805be9a2b6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#for specific coliumns\n",
        "data[['Quantity','Amount']].describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "znjOOPjR79r3",
        "outputId": "349f2643-f71b-4061-f4af-337bd78bb9aa"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          Quantity       Amount\n",
              "count  9695.000000  9695.000000\n",
              "mean      0.865704   607.620619\n",
              "std       0.354631   276.123779\n",
              "min       0.000000     0.000000\n",
              "25%       1.000000   419.000000\n",
              "50%       1.000000   568.000000\n",
              "75%       1.000000   725.000000\n",
              "max       5.000000  5495.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4aad98d5-a4de-4e98-b4c5-bbc1d81490e3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Quantity</th>\n",
              "      <th>Amount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>9695.000000</td>\n",
              "      <td>9695.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.865704</td>\n",
              "      <td>607.620619</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.354631</td>\n",
              "      <td>276.123779</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>419.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>568.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>725.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>5.000000</td>\n",
              "      <td>5495.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4aad98d5-a4de-4e98-b4c5-bbc1d81490e3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4aad98d5-a4de-4e98-b4c5-bbc1d81490e3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4aad98d5-a4de-4e98-b4c5-bbc1d81490e3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0fcf9db8-eedb-459a-bf98-49dc0eba8ec7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0fcf9db8-eedb-459a-bf98-49dc0eba8ec7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0fcf9db8-eedb-459a-bf98-49dc0eba8ec7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#EDA"
      ],
      "metadata": {
        "id": "9QwUq-o68Q0r"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "witJSbLC8Y1v",
        "outputId": "5600eff2-2342-42fc-d1b0-51c760e6b885"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['index', 'Order ID', 'Date', 'Status', 'Fulfilment', 'Sales Channel',\n",
              "       'ship-service-level', 'Category', 'Size', 'Courier Status', 'Quantity',\n",
              "       'currency', 'Amount', 'ship-city', 'ship-state', 'ship-postal-code',\n",
              "       'ship-country', 'B2B', 'fulfilled-by'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ex1=sns.countplot(x='Size' ,data=data)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "Mp6n5z_m8bdc",
        "outputId": "11809414-bd6b-465e-a393-06117640f132"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#for getting the specific value for each bar we use for loop\n",
        "\n",
        "ex1=sns.countplot(x='Size' ,data=data)\n",
        "\n",
        "for bars in ex1.containers:\n",
        "  ex1.bar_label(bars)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "z68P-3De8yK7",
        "outputId": "9103e29b-75d8-4688-80af-c2ea82a992e4"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAkQAAAGwCAYAAABIC3rIAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAABIHElEQVR4nO3deVxU9f4/8NcAMoDsmwMJuN1QURAxCXMBNWD0uqRXc4dAvRlmQZphLqglbldbrmmWil71apaiqZcrLoAJamgTLl0UxNAENBUmQFnP749+nG/ToCICM3Bez8fjPB6c8/nMmfcHaebV53zmjEwQBAFEREREEmag6wKIiIiIdI2BiIiIiCSPgYiIiIgkj4GIiIiIJI+BiIiIiCSPgYiIiIgkj4GIiIiIJM9I1wU0B9XV1bh16xYsLCwgk8l0XQ4RERHVgSAI+O233+Ds7AwDg8fPATEQ1cGtW7fg4uKi6zKIiIioHm7cuIG2bds+tg8DUR1YWFgA+P0XamlpqeNqiIiIqC7UajVcXFzE9/HHYSCqg5rLZJaWlgxEREREzUxdlrtwUTURERFJHgMRERERSR4DEREREUkeAxERkYSkpKRg2LBhcHZ2hkwmQ3x8vEZ7cXExZs6cibZt28LU1BRdu3bFhg0bxPbr169DJpPVuu3Zs0fsV1v7rl27mmqYRE+Ni6qJiCSkpKQEXl5eCAsLw6hRo7Tao6KicPz4cWzfvh3t2rXDkSNH8MYbb8DZ2RnDhw+Hi4sL8vLyNB6zceNGrFq1CkqlUuP4li1bEBwcLO5bW1s3ypiIGgIDERGRhCiVSq3g8kepqakICQmBv78/AGD69On4/PPPcfbsWQwfPhyGhoZQKBQaj9m3bx/Gjh0Lc3NzjePW1tZafYn0FS+ZERGRqE+fPjhw4AB++eUXCIKAEydO4MqVKwgMDKy1/7lz56BSqRAeHq7VFhERAXt7e/Tu3RubN2+GIAiNXT5RvXGGiIiIRJ9++immT5+Otm3bwsjICAYGBvjiiy/Qv3//Wvtv2rQJXbp0QZ8+fTSOL1myBAMHDoSZmZl42a24uBizZs1qimEQPTUGIiIiEn366ac4ffo0Dhw4ADc3N6SkpCAiIgLOzs4YPHiwRt8HDx5g586dWLBggdZ5/njM29sbJSUlWLVqFQMR6S0GIiIiAvB7wJk3bx727duHoUOHAgA8PT2hUqmwevVqrUD09ddfo7S0FFOmTHniuX19fbF06VKUlZVBLpc3Sv1Ez4JriIiICABQUVGBiooKrW8FNzQ0RHV1tVb/TZs2Yfjw4XBwcHjiuVUqFWxsbBiGSG9xhoiISEKKi4uRlZUl7ufk5EClUsHW1haurq4YMGAA5syZA1NTU7i5uSE5ORnbtm3DmjVrNM6TlZWFlJQUHD58WOs5vv32WxQUFODFF1+EiYkJEhMTsWzZMsyePbvRx0dUXzKBy/6fSK1Ww8rKCkVFRfxyVyJq1pKSkhAQEKB1PCQkBHFxccjPz0d0dDSOHDmCe/fuwc3NDdOnT0dkZKTGF2TOmzcP27dvx/Xr17VmlBISEhAdHY2srCwIgoBOnTphxowZmDZtmlZfosb0NO/fDER1wEBERETU/DzN+zejOhEREUke1xAREbVgP314XNclPFaX9wfqugQiAJwhIiIiImIgIiIiImIgIiIiIsljICIiIiLJYyAiIiIiyWMgIiIiIsljICIiIiLJYyAiIiIiyWMgIiIiIsljICIiIiLJYyAiIiIiyWMgIiIiIsljICIiIiLJYyAiIiIiyWMgIiIiIsljICIiIiLJYyAiIiIiyWMgIiIiIsljICIiIiLJ02kgSklJwbBhw+Ds7AyZTIb4+HiNdplMVuu2atUqsU+7du202pcvX65xnoyMDPTr1w8mJiZwcXHBypUrm2J4RERE1EzoNBCVlJTAy8sL69atq7U9Ly9PY9u8eTNkMhlGjx6t0W/JkiUa/d58802xTa1WIzAwEG5ubjh37hxWrVqFmJgYbNy4sVHHRkRERM2HkS6fXKlUQqlUPrJdoVBo7O/fvx8BAQHo0KGDxnELCwutvjV27NiB8vJybN68GcbGxvDw8IBKpcKaNWswffr0Wh9TVlaGsrIycV+tVtd1SERERNQMNZs1RAUFBTh06BDCw8O12pYvXw47Ozt4e3tj1apVqKysFNvS0tLQv39/GBsbi8eCgoKQmZmJ+/fv1/pcsbGxsLKyEjcXF5eGHxARERHpjWYTiLZu3QoLCwuMGjVK4/isWbOwa9cunDhxAn//+9+xbNkyvPvuu2J7fn4+2rRpo/GYmv38/Pxanys6OhpFRUXiduPGjQYeDREREekTnV4yexqbN2/GxIkTYWJionE8KipK/NnT0xPGxsb4+9//jtjYWMjl8no9l1wur/djiYiIqPlpFjNEJ0+eRGZmJqZOnfrEvr6+vqisrMT169cB/L4OqaCgQKNPzf6j1h0RERGRtDSLQLRp0yb4+PjAy8vriX1VKhUMDAzg6OgIAPDz80NKSgoqKirEPomJiXB3d4eNjU2j1UxERETNh04DUXFxMVQqFVQqFQAgJycHKpUKubm5Yh+1Wo09e/bUOjuUlpaGjz76CD/++COuXbuGHTt2IDIyEpMmTRLDzoQJE2BsbIzw8HBcunQJu3fvxscff6xxqY2IiIikTadriNLT0xEQECDu14SUkJAQxMXFAQB27doFQRAwfvx4rcfL5XLs2rULMTExKCsrQ/v27REZGakRdqysrHDkyBFERETAx8cH9vb2WLhw4SM/ck9ERETSIxMEQdB1EfpOrVbDysoKRUVFsLS01HU5RER19tOHx3VdwmN1eX+grkugFuxp3r+bxRoiIiIiosbEQERERESSx0BEREREksdARERERJLHQERERESSx0BEREREksdARERERJLHQERERESSx0BEREREksdARERERJLHQERERESSx0BERETNSkpKCoYNGwZnZ2fIZDLEx8drtIeGhkImk2lswcHBGn2uXLmCESNGwN7eHpaWlujbty9OnDhR6/PdvXsXbdu2hUwmQ2FhYSONinSNgYhapKZ6wZw1axZ8fHwgl8vRo0ePRh4VEQFASUkJvLy8sG7dukf2CQ4ORl5enrj9+9//1mj/61//isrKShw/fhznzp2Dl5cX/vrXvyI/P1/rXOHh4fD09GzwcZB+YSCiFqkpXzDDwsLw6quvNso4iEibUqnEBx98gFdeeeWRfeRyORQKhbjZ2NiIbb/++iuuXr2K9957D56envjLX/6C5cuXo7S0FBcvXtQ4z/r161FYWIjZs2c32nhIPxjpugCixqBUKqFUKh/bp+YFszY1L5ibNm0S/89w+fLl+Oyzz3Dx4kXxcZ988gkA4M6dO8jIyGjAERDRs0hKSoKjoyNsbGwwcOBAfPDBB7CzswMA2NnZwd3dHdu2bUPPnj0hl8vx+eefw9HRET4+PuI5Ll++jCVLluDMmTO4du2aroZCTYQzRCRZNS+Y7u7umDFjBu7evSu2/fEFs6SkBJWVlbW+YBKR/gkODsa2bdtw7NgxrFixAsnJyVAqlaiqqgIAyGQyHD16FD/88AMsLCxgYmKC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de/eHVevXsWOHTvwv//9DwAwfvx4TJw4Eaampg1aIBEREVFjq1cgio2NRZs2bTBt2jSN45s3b8adO3cwd+7cBimOiIiIqCnUaw3R559/js6dO2sd9/DwwIYNG565KCIiIqKmVK9AlJ+fDycnJ63jDg4OyMvLe+aiiIiIiJpSvQKRi4sLTp06pXX81KlTcHZ2fuaiiIiIiJpSvdYQTZs2DW+//TYqKiowcOBAAMCxY8fw7rvv8k7VRERE1OzUKxDNmTMHd+/exRtvvIHy8nIAgImJCebOnYvo6OgGLZCIiIiosdUrEMlkMqxYsQILFizATz/9BFNTU/zlL3+BXC5v6PqIiIiIGl29AlENc3NzvPDCCw1VCxEREZFO1GtRNREREVFLwkBEREREksdARERERJLHQERERESSx0BEREREksdARERERJLHQERERESSx0BEREREksdARERERJLHQERERESSx0BEREREksdARERERJLHQERERESSx0BEREREksdARERERJLHQETUjLRr1w4ymUxri4iIwL179/Dmm2/C3d0dpqamcHV1xaxZs1BUVCQ+/u7duwgODoazszPkcjlcXFwwc+ZMqNVqHY6KiEj3jHRdABHV3ffff4+qqipx/+LFi3j55ZcxZswY3Lp1C7du3cLq1avRtWtX/Pzzz3j99ddx69YtfP311wAAAwMDjBgxAh988AEcHByQlZUlhqmdO3fqalhERDrHQETUjDg4OGjsL1++HB07dsSAAQMgk8nwzTffiG0dO3bEhx9+iEmTJqGyshJGRkawsbHBjBkzxD5ubm544403sGrVqiYbAxGRPtL7S2aPu0QAAP7+/lptr7/+usY5cnNzMXToUJiZmcHR0RFz5sxBZWWlLoZD1GDKy8uxfft2hIWFQSaT1dqnqKgIlpaWMDKq/f99bt26hb1792LAgAGNWSoRkd7T+xmix10iqDFt2jQsWbJE3DczMxN/rqqqwtChQ6FQKJCamoq8vDxMmTIFrVq1wrJly5pmEESNID4+HoWFhQgNDa21/ddff8XSpUsxffp0rbbx48dj//79ePDgAYYNG4Yvv/yykaslItJvej9D5ODgAIVCIW4HDx4ULxHUMDMz0+hjaWkpth05cgSXL1/G9u3b0aNHDyiVSixduhTr1q1DeXm5LoZE1CA2bdoEpVIJZ2dnrTa1Wo2hQ4eia9euiImJ0Wpfu3Ytzp8/j/379yM7OxtRUVFNUDERkf7S+0D0R4+6RLBjxw7Y29ujW7duiI6ORmlpqdiWlpaG7t27o02bNuKxoKAgqNVqXLp0qdbnKSsrg1qt1tiI9MnPP/+Mo0ePYurUqVptv/32G4KDg2FhYYF9+/ahVatWWn0UCgU6d+6M4cOH4/PPP8f69euRl5fXFKUTEeklvb9k9ke1XSKYMGEC3Nzc4OzsjIyMDMydOxeZmZnYu3cvACA/P18jDAEQ9/Pz82t9ntjYWCxevLhxBkHUALZs2QJHR0cMHTpU47harUZQUBDkcjkOHDgAExOTJ56ruroawO//I0BEJFXNKhDVdongj+sjunfvDicnJwwaNAjZ2dno2LFjvZ4nOjpa4xKCWq2Gi4tL/QsnakDV1dXYsmULQkJCNBZLq9VqBAYGorS0FNu3b9eY3XRwcIChoSEOHz6MgoICvPDCCzA3N8elS5cwZ84cvPTSS2jXrp2ORkREpHvNJhDVXCKomfl5FF9fXwBAVlYWOnbsCIVCgbNnz2r0KSgoAPD7ZYPayOVyyOXyBqiaqOEdPXoUubm5CAsL0zh+/vx5nDlzBgDQqVMnjbacnBy0a9cOpqam+OKLLxAZGYmysjK4uLhg1KhReO+995qsfiIifdRsAtGjLhH8mUqlAgA4OTkBAPz8/PDhhx/i9u3bcHR0BAAkJibC0tISXbt2bdSaiRpDYGAgBEHQOu7v71/r8T8KCAhAampqY5VGRNRsNYtA9KhLBNnZ2di5cyeGDBkCOzs7ZGRkIDIyEv3794enpyeA3988unbtismTJ2PlypXIz8/H/PnzERERwVkgIiIiAtBMAtGjLhEYGxvj6NGj+Oijj1BSUgIXFxeMHj0a8+fPF/sYGhri4MGDmDFjBvz8/NC6dWuEhIRo3LeISF8k99fvGyQOSEnWdQlERI2iWQSiR10icHFxQXLyk1+g3dzccPjw4cYojYiIiFqAZnUfIiIiIqLGwEBEREREksdARERERJLHQERERESSx0BEREREksdARERERJLHQERERESSx0BEREREksdARERERJLHQERERESSx0BEREREksdARERERJLHQERERESSx0BEREREksdARERERJLHQERERESSx0BEREREksdARERERJLHQERERESSx0BEREREksdARERERJLHQERERESSx0BEREREksdARERERJLHQERERESSx0BEREREksdARERERJLHQERERESSx0BEREREksdARERERJLHQERERESSx0BEREREksdARERERJLHQERERESSx0BEREREksdARERERJKn14EoJiYGMplMY+vcubPY/vDhQ0RERMDOzg7m5uYYPXo0CgoKNM6Rm5uLoUOHwszMDI6OjpgzZw4qKyubeihERESkx4x0XcCTeHh44OjRo+K+kdH/lRwZGYlDhw5hz549sLKywsyZMzFq1CicOnUKAFBVVYWhQ4dCoVAgNTUVeXl5mDJlClq1aoVly5Y1+ViIiIhIP+l9IDIyMoJCodA6XlRUhE2bNmHnzp0YOHAgAGDLli3o0qULTp8+jRdffBFHjhzB5cuXcfToUbRp0wY9evTA0qVLMXfuXMTExMDY2Liph0NERER6SK8vmQHA1atX4ezsjA4dOmDixInIzc0FAJw7dw4VFRUYPHiw2Ldz585wdXVFWloaACAtLQ3du3dHmzZtxD5BQUFQq9W4dOnSI5+zrKwMarVaYyMiIqKWS68Dka+vL+Li4pCQkID169cjJycH/fr1w2+//Yb8/HwYGxvD2tpa4zFt2rRBfn4+ACA/P18jDNW017Q9SmxsLKysrMTNxcWlYQdGREREekWvL5kplUrxZ09PT/j6+sLNzQ1fffUVTE1NG+15o6OjERUVJe6r1WqGIiIiohZMr2eI/sza2hrPP/88srKyoFAoUF5ejsLCQo0+BQUF4pojhUKh9amzmv3a1iXVkMvlsLS01NiIiIio5WpWgai4uBjZ2dlwcnKCj48PWrVqhWPHjontmZmZyM3NhZ+fHwDAz88PFy5cwO3bt8U+iYmJsLS0RNeuXZu8fiIiItJPen3JbPbs2Rg2bBjc3Nxw69YtLFq0CIaGhhg/fjysrKwQHh6OqKgo2NrawtLSEm+++Sb8/Pzw4osvAgACAwPRtWtXTJ48GStXrkR+fj7mz5+PiIgIyOVyHY+OiIiI9IVeB6KbN29i/PjxuHv3LhwcHNC3b1+cPn0aDg4OAIC1a9fCwMAAo0ePRllZGYKCgvDZZ5+Jjzc0NMTBgwcxY8YM+Pn5oXXr1ggJCcGSJUt0NSQiIiLSQ3odiHbt2vXYdhMTE6xbtw7r1q17ZB83NzccPny4oUsjIiKiFqRZrSEiIiIiagwMRERERCR5DEREREQkeQxEREREJHkMRERERCR5DEREREQkeQxEREREJHkMRERERCR5DEREREQkeQxEREREJHkMRERERCR5DEREREQkeQxEREREJHkMRERERCR5DEREREQkeQxEREREJHkMRERERCR5DEREREQkeQxEREREJHkMRERERCR5DEREREQkeQxEREREJHkMRERERCR5DEREREQkeQxEREREJHkMRERERCR5DEREREQkeQxEREREJHkMRERERCR5DEREREQkeQxEREREJHkMRERERCR5DEREREQkeQxEREREJHkMRERERCR5DEREREQkeXodiGJjY/HCCy/AwsICjo6OGDlyJDIzMzX6+Pv7QyaTaWyvv/66Rp/c3FwMHToUZmZmcHR0xJw5c1BZWdmUQyEiIiI9ZqTrAh4nOTkZEREReOGFF1BZWYl58+YhMDAQly9fRuvWrcV+06ZNw5IlS8R9MzMz8eeqqioMHToUCoUCqampyMvLw5QpU9CqVSssW7asScdDRERE+kmvZ4gSEhIQGhoKDw8PeHl5IS4uDrm5uTh37pxGPzMzMygUCnGztLQU244cOYLLly9j+/bt6NGjB5RKJZYuXYp169ahvLy8qYdERERUq5SUFAwbNgzOzs6QyWSIj4/XaC8oKEBoaCicnZ1hZmaG4OBgXL16VWy/fv261hWTmm3Pnj1NPJrmR68D0Z8VFRUBAGxtbTWO79ixA/b29ujWrRuio6NRWloqtqWlpaF79+5o06aNeCwoKAhqtRqXLl2q9XnKysqgVqs1NiIiosZUUlICLy8vrFu3TqtNEASMHDkS165dw/79+/HDDz/Azc0NgwcPRklJCQDAxcUFeXl5GtvixYthbm4OpVLZ1MNpdvT6ktkfVVdX4+2338ZLL72Ebt26iccnTJgANzc3ODs7IyMjA3PnzkVmZib27t0LAMjPz9cIQwDE/fz8/FqfKzY2FosXL26kkRAREWlTKpWPDC5Xr17F6dOncfHiRXh4eAAA1q9fD4VCgX//+9+YOnUqDA0NoVAoNB63b98+jB07Fubm5o1ef3PXbAJRREQELl68iO+++07j+PTp08Wfu3fvDicnJwwaNAjZ2dno2LFjvZ4rOjoaUVFR4r5arYaLi0v9CiciInpGZWVlAAATExPxmIGBAeRyOb777jtMnTpV6zHnzp2DSqWqdcaJtDWLS2YzZ87EwYMHceLECbRt2/axfX19fQEAWVlZAACFQoGCggKNPjX7f07SNeRyOSwtLTU2IiIiXencuTNcXV0RHR2N+/fvo7y8HCtWrMDNmzeRl5dX62M2bdqELl26oE+fPk1cbfOk14FIEATMnDkT+/btw/Hjx9G+ffsnPkalUgEAnJycAAB+fn64cOECbt++LfZJTEyEpaUlunbt2ih1ExERNaRWrVph7969uHLlCmxtbWFmZoYTJ05AqVTCwED7rfzBgwfYuXMnwsPDdVBt86TXl8wiIiKwc+dO7N+/HxYWFuKaHysrK5iamiI7Oxs7d+7EkCFDYGdnh4yMDERGRqJ///7w9PQEAAQGBqJr166YPHkyVq5cifz8fMyfPx8RERGQy+W6HB4REVGd+fj4QKVSoaioCOXl5XBwcICvry969eql1ffrr79GaWkppkyZooNKmye9niFav349ioqK4O/vDycnJ3HbvXs3AMDY2BhHjx5FYGAgOnfujHfeeQejR4/Gt99+K57D0NAQBw8ehKGhIfz8/DBp0iRMmTJF475FREREzYWVlRUcHBxw9epVpKenY8SIEVp9Nm3ahOHDh8PBwUEHFTZPej1DJAjCY9tdXFyQnJz8xPO4ubnh8OHDDVUWERFRgysuLhbXvwJATk4OVCoVbG1t4erqij179sDBwQGurq64cOEC3nrrLYwcORKBgYEa58nKykJKSgrf956SXgciIiIiqUhPT0dAQIC4X/Np55CQEMTFxSEvLw9RUVEoKCiAk5MTpkyZggULFmidZ/PmzWjbtq1WUKLHYyAiIiLSA/7+/o+9MjJr1izMmjXriedZtmwZv5qqHvR6DRERERFRU+AMERERURP4ak9vXZfwWGPHnNV1CTrFGSIiIiKSPAYiIiIikjwGIiIiIpI8BiIiIiKSPAYiIiIikjwGIiIiIpI8BiIiIiKSPAYiIiIikjwGIiIiIpI8BiIiIiKSPAYiIiIikjwGIiIiIpI8BiIiIiKSPAYiIiIikjwGIiIiIpI8BiIiIiKSPAYiIiIikjwGIiIiIpI8BiIiIiKSPAYiIiIikjwGIiIiIpI8BiIiIiKSPAYiIiIikjwGIiLSOzExMZDJZBpb586ddV0WETWA2NhYvPDCC7CwsICjoyNGjhyJzMxMXZfFQERE+snDwwN5eXni9t133+m6JCJqAMnJyYiIiMDp06eRmJiIiooKBAYGoqSkRKd1Gen02YmIHsHIyAgKhULXZRBRA0tISNDYj4uLg6OjI86dO4f+/fvrqCrOEBGRnrp69SqcnZ3RoUMHTJw4Ebm5ubouiYgaQVFREQDA1tZWp3UwEBGR3vH19UVcXBwSEhKwfv165OTkoF+/fvjtt990XRoRNaDq6mq8/fbbeOmll9CtWzed1sJLZkSkd5RKpfizp6cnfH194ebmhq+++grh4eE6rIyIGlJERAQuXryoF2sEGYiISO9ZW1vj+eefR1ZWlq5LIaIGMnPmTBw8eBApKSlo27atrsvhJTMi0n/FxcXIzs6Gk5OTrkshomckCAJmzpyJffv24fjx42jfvr2uSwLAQEREemj27NlITk7G9evXkZqaildeeQWGhoYYP368rksjomcUERGB7du3Y+fOnbCwsEB+fj7y8/Px4MEDndYlqUC0bt06tGvXDiYmJvD19cXZs2d1XRIR1eLmzZsYP3483N3dMXbsWNjZ2eH06dNwcHDQdWlE9IzWr1+PoqIi+Pv7w8nJSdx2796t07oks4Zo9+7diIqKwoYNG+Dr64uPPvoIQUFByMzMhKOjo67LI6I/2LVrl65LIKJGIgiCrkuolWRmiNasWYNp06bhtddeQ9euXbFhwwaYmZlh8+bNui6NiIiIdEwSM0Tl5eU4d+4coqOjxWMGBgYYPHgw0tLStPqXlZWhrKxM3K+5aZRardboV1Wm2+udT/Lneh/lt4dVjVzJs6nrOCofVDZyJfVX1zGUVOrvGIC6j+Pzef9p5Erq7+/LlE/uBOBhRUUjV/Js6vpvUfxQt1+H8CR1HccfX5P1TV3HUFraMl5r+8QfbeRK6i915GCN/Zox1WlWSpCAX375RQAgpKamahyfM2eO0Lt3b63+ixYtEgBw48aNGzdu3FrAduPGjSdmBUnMED2t6OhoREVFifvV1dW4d+8e7OzsIJPJGuU51Wo1XFxccOPGDVhaWjbKczSFljCOljAGgOPQJy1hDEDLGEdLGAPAcdSVIAj47bff4Ozs/MS+kghE9vb2MDQ0REFBgcbxgoKCWr88Ui6XQy6XaxyztrZuzBJFlpaWzfqPu0ZLGEdLGAPAceiTljAGoGWMoyWMAeA46sLKyqpO/SSxqNrY2Bg+Pj44duyYeKy6uhrHjh2Dn5+fDisjIiIifSCJGSIAiIqKQkhICHr16oXevXvjo48+QklJCV577TVdl0ZEREQ6JplA9Oqrr+LOnTtYuHAh8vPz0aNHDyQkJKBNmza6Lg3A75fpFi1apHWprrlpCeNoCWMAOA590hLGALSMcbSEMQAcR2OQCYKe3iGJiIiIqIlIYg0RERER0eMwEBEREZHkMRARERGR5DEQERERkeQxEOmBO3fuYMaMGXB1dYVcLodCoUBQUBBOnTql69IAAOvXr4enp6d44yw/Pz/85z+/f1fVrVu3YGNjg08++UTjMWfOnEGrVq1w5MgRAEBcXFyT3dzyWYSGhmLkyJG6LqNOqqqq0KdPH4waNUrjeFFREVxcXPD+++8DAPbt24cXX3wRVlZWsLCwgIeHB95++20dVKzpl19+waRJk2BnZwdTU1N0794d6enpAICSkhJ07NhR447xAHD9+nVYWlriiy++AAAkJSVBJpOhsLCwSWuvy+/+8OHDMDY2xvnz5zX6/OMf/4C9vT3y8/MB6PffXGhoKGQyGV5//XWttoiICMhkMoSGhjZ9YU9Ql3+f69evQyaTQaVS6abIP6n5Xf95y8rK0nVpTy0mJkZrHJ07dwag5+8ZDfNtYfQs+vXrJ/j6+grHjx8Xrl+/Lpw5c0ZYtmyZsH//fl2XJgiCIBw4cEA4dOiQcOXKFSEzM1OYN2+e0KpVK+HixYuCIAjCv/71L8HMzEy4cuWKIAiCUFpaKri7uwuvv/66eI4tW7YIVlZWuij/qYSEhAgjRozQdRl1lpmZKZiamgrbt28Xj02ePFnw9PQUysrKhKNHjwqtWrUSVq5cKfzvf/8TMjMzhX379glvvPGGDqsWhHv37glubm5CaGiocObMGeHatWvCf//7XyErK0vsk5ycLBgZGQkpKSmCIAhCdXW14O/vLwQHB4t9Tpw4IQAQ7t+/39RDeOLvXhAEITw8XPDw8BAePnwoCIIgXLp0STAxMRF27dolPkaf/+ZCQkIEFxcXwcrKSigtLRWPP3jwQLC2thZcXV2FkJAQ3RX4GE/698nJyREACD/88IPuivyDkJAQITg4WMjLy9PYKisrNfrV/G3ps0WLFgkeHh4a47hz547Yrq/vGQxEOnb//n0BgJCUlKTrUp6KjY2N8OWXX4r7r7zyitCnTx+hqqpKeOutt4QOHToIv/32m9jOQNR4Pv74Y8HGxka4deuWEB8fL7Rq1UpQqVSCIAjCW2+9Jfj7++u4Qm1z584V+vbt+8R+kZGRQseOHYXi4mJh7dq1grW1tXDz5k2xXZeBSBAe/7sXBEFQq9WCm5ubMHfuXKGiokLo1auXMGbMGI1z6PPfXE1t3bp10wgWO3bsEDw9PYURI0bobSAShMf/++hjIKrt72DAgAFCRESE8NZbbwl2dnbif88XLlwQgoODhdatWwuOjo7CpEmTNEJHVVWVsGzZMqFdu3aCiYmJ4OnpKezZs6dJxrJo0SLBy8vrsX308T2Dl8x0zNzcHObm5oiPj0dZWZmuy3miqqoq7Nq1CyUlJRpfe7JhwwZcvXoVEydOxD//+U9s2bIF5ubmOqxUOt588014eXlh8uTJmD59OhYuXAgvLy8AgEKhwKVLl3Dx4kUdV6npwIED6NWrF8aMGQNHR0d4e3uLl8H+6MMPP4SRkREmTZqEefPm4dNPP8Vzzz2ng4pr97jfPQBYWFhg8+bN+Mc//oGJEyfixo0bWL9+vQ4rrp+wsDBs2bJF3N+8eXOzuMv/k/59moutW7fC2NgYp06dwoYNG1BYWIiBAwfC29sb6enpSEhIQEFBAcaOHSs+JjY2Ftu2bcOGDRtw6dIlREZGYtKkSUhOTm6Smq9evQpnZ2d06NABEydORG5urka7Xr5nNGn8olp9/fXXgo2NjWBiYiL06dNHiI6OFn788Uddl6UhIyNDaN26tWBoaChYWVkJhw4d0uqzYcMGAYAwY8YMrTbOEDWun376SQAgdO/eXaioqBCPFxcXC0OGDBEACG5ubsKrr74qbNq0SbyEoytyuVyQy+VCdHS0cP78eeHzzz8XTExMhLi4OK2+CQkJAgBBqVRqtel6hkgQHv27/6Nx48YJAITdu3drtenz31xNbbdv3xbkcrlw/fp14fr164KJiYlw584dvZ8hEoRH//vo4wyRoaGh0Lp1a3H729/+JgwYMEDw9vbW6Lt06VIhMDBQ49iNGzcEAEJmZqbw8OFDwczMTEhNTdXoEx4eLowfP77Rx3L48GHhq6++En788UchISFB8PPzE1xdXQW1Wq3RT9/eMzhDpAdGjx6NW7du4cCBAwgODkZSUhJ69uyJuLg4XZcmcnd3h0qlwpkzZzBjxgyEhITg8uXLYntVVRXi4uJgZmaG06dPo7KyUofVSs/mzZthZmaGnJwc3Lx5UzzeunVrHDp0CFlZWZg/fz7Mzc3xzjvvoHfv3igtLdVZvdXV1ejZsyeWLVsGb29vTJ8+HdOmTcOGDRu0+m7atAlmZma4cOECioqKdFDt4z3qd1/jl19+QUJCAszMzHDy5EkdVPjsHBwcMHToUMTFxWHLli0YOnQo7O3tdV1WnTzp30efBAQEQKVSiVvNwmMfHx+Nfj/++CNOnDghXmEwNzcXFy1nZ2cjKysLpaWlePnllzX6bNu2DdnZ2Y0+DqVSiTFjxsDT0xNBQUE4fPgwCgsL8dVXX4l99PE9g4FIT5iYmODll1/GggULkJqaitDQUCxatEjXZYmMjY3RqVMn+Pj4IDY2Fl5eXvj444/F9tWrV+PatWtIT0/HzZs3sWzZMh1WKy2pqalYu3YtDh48iN69eyM8PBzCn76Rp2PHjpg6dSq+/PJLnD9/HpcvX8bu3bt1VDHg5OSErl27ahzr0qWL1rT67t27cfDgQaSmpsLCwgKRkZFNWeYT1eV3P23aNPj4+ODgwYNYv359k12yaGhhYWGIi4vD1q1bERYWputy6qQu/z76pHXr1ujUqZO4OTk5icf/qLi4GMOGDdMITyqVClevXkX//v1RXFwMADh06JBG++XLl/H11183+bisra3x/PPPa3xiTh/fMxiI9FTXrl1RUlKi6zIeqbq6WlzzdOnSJSxatAjr169Hly5dsH79enzwwQfIyMjQcZUtX2lpKUJDQzFjxgwEBARg06ZNOHv2bK0zLTXatWsHMzMznf59vfTSS8jMzNQ4duXKFbi5uYn7BQUFiIiIwAcffAAvLy/ExcVh27Zt4i0fdK0uv/svv/wS3333HTZt2oSAgADMmDEDYWFhev3f9qMEBwejvLwcFRUVCAoK0nU5T1Sf/zaai549e+LSpUto166dRoDq1KkTWrduja5du0IulyM3N1er3cXFpcnrLS4uRnZ2thjw9PU9QzLfdq+v7t69izFjxiAsLAyenp6wsLBAeno6Vq5ciREjRui6PABAdHQ0lEolXF1d8dtvv2Hnzp1ISkrCf//7X1RWViIkJASjRo0S7/kxevRojB49GqGhoTh79iyMjH7/M6uqqtK654dcLkeXLl2aekiPVVRUpFWnnZ2dTl5IniQ6OhqCIGD58uUAfg87q1evxuzZs6FUKhEXF4fS0lIMGTIEbm5uKCwsxCeffIKKigq8/PLLOqs7MjISffr0wbJlyzB27FicPXsWGzduxMaNG8U+06dPR5cuXcR7JvXu3Rtz5szB9OnTcfHiRVhZWYl9L1y4AAsLC3FfJpM1+uLZJ/3uZTIZoqKisHr1ajHorVixAv/5z3/w3nvv4dNPPxXP1Rz+5gwNDfHTTz+JP+u7J/371PhzMAcADw8PtGrVqslqfVoRERH44osvMH78eLz77ruwtbVFVlYWdu3ahS+//BIWFhaYPXs2IiMjUV1djb59+6KoqAinTp2CpaUlQkJCGrW+2bNnY9iwYXBzc8OtW7ewaNEiGBoaYvz48fr9ntGkK5ZIy8OHD4X33ntP6Nmzp2BlZSWYmZkJ7u7uwvz58zXu+6FLYWFhgpubm2BsbCw4ODgIgwYNEo4cOSIIgiAsXrxYUCgUwt27dzUec/fuXUGhUAiLFy8WBOH3BXIAtLaOHTs2+XgeJyQkpNY6w8PDdV2alqSkJMHQ0FA4efKkVltgYKAwcOBA4fjx48Lo0aMFFxcXwdjYWGjTpo0QHBxc62Oa2rfffit069ZNkMvlQufOnYWNGzeKbVu3bhXMzMyEq1evajymrKxM6Natm/Daa68JgvB/i6r/vBkaGjZq7XX53Q8cOFBr4asgCMLJkycFQ0ND8VYb+vw396QF3/q6qLou/z7Xrl2r9fcOQLhx40aT1/y4j92/9dZbWsevXLkivPLKK4K1tbVgamoqdO7cWXj77beF6upqQRB+v2/XRx99JLi7uwutWrUSHBwchKCgICE5ObmRRyIIr776quDk5CQYGxsLzz33nPDqq6+K9xjT5/cMmSDo8QVVIiIioibANUREREQkeQxEREREJHkMRERERCR5DEREREQkeQxEREREJHkMRERERCR5DEREREQkeQxEREREJHkMREQkOTKZDPHx8boug4j0CAMREbU4d+7cwYwZM+Dq6gq5XA6FQoGgoCCcOnUKAJCXl6fxfVZERPxyVyJqcUaPHo3y8nJs3boVHTp0QEFBAY4dO4a7d+8CABQKhY4rJCJ9wxkiImpRCgsLcfLkSaxYsQIBAQFwc3ND7969ER0djeHDhwPQvGQWExMDmUymtcXFxQEAqqurERsbi/bt28PU1BReXl74+uuvdTQ6ImosDERE1KKYm5vD3Nwc8fHxKCsre2L/2bNnIy8vT9xWr14NMzMz9OrVCwAQGxuLbdu2YcOGDbh06RIiIyMxadIkJCcnN/ZQiKgJ8dvuiajF+eabbzBt2jQ8ePAAPXv2xIABAzBu3Dh4enoC+H2GaN++fRg5cqTG406fPo2AgABs3boVY8eORVlZGWxtbXH06FH4+fmJ/aZOnYrS0lLs3LmzKYdFRI2IM0RE1OKMHj0at27dwoEDBxAcHIykpCT07NlTvAxWm9zcXIwcORKzZ8/G2LFjAQBZWVkoLS3Fyy+/LM48mZubY9u2bcjOzm6i0RBRU+AMERFJwtSpU5GYmIiff/5Za4aopKQEL730Etq3b4+9e/dCJpMBAM6cOYMXX3wRSUlJeO655zTOJ5fL4eLi0tTDIKJGwk+ZEZEkdO3atdZ7DwmCgEmTJqG6uhr/+te/xDBU8xi5XI7c3FwMGDCgCasloqbGQERELcrdu3cxZswYhIWFwdPTExYWFkhPT8fKlSsxYsQIrf4xMTE4evQojhw5guLiYhQXFwMArKysYGFhgdmzZyMyMhLV1dXo27cvioqKcOrUKVhaWiIkJKSph0dEjYSBiIhaFHNzc/j6+mLt2rXIzs5GRUUFXFxcMG3aNMybN0+rf3JyMoqLi9GnTx+N41u2bEFoaCiWLl0KBwcHxMbG4tq1a7C2tkbPnj1rPRcRNV9cQ0RERESSx0+ZERERkeQxEBEREZHkMRARERGR5DEQERERkeQxEBEREZHkMRARERGR5DEQERERkeQxEBEREZHkMRARERGR5DEQERERkeQxEBEREZHk/T/bkRmylzAYCQAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## GROUP BY **FUNCTION**"
      ],
      "metadata": {
        "id": "OhwgT2zD93DK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data.groupby(['Size'], as_index = False)['Quantity'].sum().sort_values(by = 'Quantity' ,ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "ZOXoR4q49M_1",
        "outputId": "ab9cc90b-506b-4990-a5ba-deffa764cbc7"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Size  Quantity\n",
              "5     M    1625.0\n",
              "4     L    1376.0\n",
              "7    XL    1366.0\n",
              "9   XXL    1198.0\n",
              "6     S    1073.0\n",
              "0   3XL     995.0\n",
              "8    XS     587.0\n",
              "3  Free     169.0\n",
              "2   6XL       3.0\n",
              "1   5XL       1.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8490cf67-3ad6-460f-b6ea-25d292ed1c4e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Size</th>\n",
              "      <th>Quantity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>M</td>\n",
              "      <td>1625.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>L</td>\n",
              "      <td>1376.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>XL</td>\n",
              "      <td>1366.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>XXL</td>\n",
              "      <td>1198.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>S</td>\n",
              "      <td>1073.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3XL</td>\n",
              "      <td>995.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>XS</td>\n",
              "      <td>587.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Free</td>\n",
              "      <td>169.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>6XL</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5XL</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8490cf67-3ad6-460f-b6ea-25d292ed1c4e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8490cf67-3ad6-460f-b6ea-25d292ed1c4e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8490cf67-3ad6-460f-b6ea-25d292ed1c4e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2b57a44f-474c-40aa-a518-312525de6af7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2b57a44f-474c-40aa-a518-312525de6af7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2b57a44f-474c-40aa-a518-312525de6af7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ex2=data.groupby(['Size'], as_index = False)['Quantity'].sum().sort_values(by = 'Quantity' ,ascending=False)\n",
        "\n",
        "sns.barplot(x='Size',y='Quantity' ,data=ex2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "gBcIpJXX-dUN",
        "outputId": "9dd86c26-8646-46d8-8460-7037e8fc76eb"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Size', ylabel='Quantity'>"
            ]
          },
          "metadata": {},
          "execution_count": 38
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# COURIER **STATUS**"
      ],
      "metadata": {
        "id": "1jrg9NFG_LID"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(data=data, x='Courier Status', hue='Status')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "id": "fJ18IpQb_Sp7",
        "outputId": "17847a21-bf56-416e-aa52-2ead46604315"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='Courier Status', ylabel='count'>"
            ]
          },
          "metadata": {},
          "execution_count": 39
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#just for increase the bar size\n",
        "plt.figure(figsize=(10,5))\n",
        "\n",
        "ex3=sns.countplot(data=data, x='Courier Status', hue='Status')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 465
        },
        "id": "ENbRI66b_nHx",
        "outputId": "55cb53d3-ed10-4b79-ec4c-5a30abf88c65"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#histogram\n",
        "\n",
        "data['Size'].hist(color='aqua')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "lXFw6vVKAIA5",
        "outputId": "8623e4ab-5b58-44af-dde2-cabaa2944ffa"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 43
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['Category']=data['Category'].astype(str)"
      ],
      "metadata": {
        "id": "5D-aFmFpAhvP"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "column_data = data['Category']\n",
        "plt.figure(figsize=(10,5))\n",
        "plt.hist(column_data, bins =15 ,color='orange',edgecolor='black')\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 482
        },
        "id": "T7iPmfmEA9Ja",
        "outputId": "10be4cc2-f79f-4919-9fa1-c45d6586303f"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#checking B2B data by pie chart\n",
        "\n",
        "B2B=data['B2B'].value_counts()\n",
        "\n",
        "#plot the chart and autopct is for displaying the decimal % of labels\n",
        "plt.pie(B2B,labels=B2B.index, autopct='%2.2f%%')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 510
        },
        "id": "C0u5YFANCNsN",
        "outputId": "35988cf9-984c-4084-8426-80259a8ba6da"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "([<matplotlib.patches.Wedge at 0x7f6a99f96ec0>,\n",
              "  <matplotlib.patches.Wedge at 0x7f6a99f970d0>],\n",
              " [Text(-1.0995005390055252, 0.03314460327956334, 'False'),\n",
              "  Text(1.0995005369690338, -0.03314467083569068, 'True')],\n",
              " [Text(-0.5997275667302864, 0.018078874516125453, '99.04%'),\n",
              "  Text(0.5997275656194729, -0.018078911364922186, '0.96%')])"
            ]
          },
          "metadata": {},
          "execution_count": 57
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['Category'] = data['Category'].astype('str')\n",
        "data['ship-state']=data['ship-state'].astype('str')"
      ],
      "metadata": {
        "id": "D_KJ75PlHg_3"
      },
      "execution_count": 79,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qjVK7H5fIkm3",
        "outputId": "40ae028a-4d13-4845-8864-ea2e8f231700"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 9695 entries, 0 to 28377\n",
            "Data columns (total 19 columns):\n",
            " #   Column              Non-Null Count  Dtype         \n",
            "---  ------              --------------  -----         \n",
            " 0   index               9695 non-null   int64         \n",
            " 1   Order ID            9695 non-null   object        \n",
            " 2   Date                9695 non-null   datetime64[ns]\n",
            " 3   Status              9695 non-null   object        \n",
            " 4   Fulfilment          9695 non-null   object        \n",
            " 5   Sales Channel       9695 non-null   object        \n",
            " 6   ship-service-level  9695 non-null   object        \n",
            " 7   Category            9695 non-null   object        \n",
            " 8   Size                9695 non-null   object        \n",
            " 9   Courier Status      9695 non-null   object        \n",
            " 10  Quantity            9695 non-null   float64       \n",
            " 11  currency            9695 non-null   object        \n",
            " 12  Amount              9695 non-null   float64       \n",
            " 13  ship-city           9695 non-null   object        \n",
            " 14  ship-state          9695 non-null   object        \n",
            " 15  ship-postal-code    9695 non-null   int64         \n",
            " 16  ship-country        9695 non-null   object        \n",
            " 17  B2B                 9695 non-null   object        \n",
            " 18  fulfilled-by        9695 non-null   object        \n",
            "dtypes: datetime64[ns](1), float64(2), int64(2), object(14)\n",
            "memory usage: 1.5+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#prepare data for scatter plot\n",
        "\n",
        "x_data = data['Category']\n",
        "y_data = data['Size']\n",
        "\n",
        "#plot the scatter plot\n",
        "plt.scatter(x_data,y_data)\n",
        "plt.xlabel('Category')\n",
        "plt.ylabel('Size')\n",
        "plt.title('Scatter plot')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 658
        },
        "id": "FeE3oZiWC3my",
        "outputId": "9e872515-54f5-4194-c52b-8c448c5b65c0"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-69-aaeebacc2438>\u001b[0m in \u001b[0;36m<cell line: 8>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m#plot the scatter plot\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_data\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Category'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Size'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Scatter plot'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: 'str' object is not callable"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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w4cPN4GBgaZp06bm008/NadPn7b/xm677TaH74sx1//OlIUrjvvGGJOUlGQ6dOhgfH19TcOGDc0///lP+341xpj8/Hwza9Ys+zG1TZs25sMPP7TPP3v2rPnrX/9q6tata2rUqGFatGhhFi9eXOr2VJnbQKV16dIl3XPPPerWrZv279+v7du3a+zYsQ5p+ujRo1q5cqVWr16t1atXa/PmzUpISChxubNnz1bbtm21d+9ePf3009q5c6ck6YsvvlB6ero++eSTcm1XcYKCghQUFKSVK1cqJyfnmuWeeeYZPfDAA9q/f7/69eunoUOH6uzZs9csn5WVpRdeeEFvvfWWDh48qLlz5+qBBx5Qnz59lJ6ervT0dHXu3Lk8mnRN58+f17///W+1aNFCderUKTK/oKBATZo00YcffqiUlBTFxcVp2rRp+uCDD+xlCuuenp6u7777Ti1atNBdd90lSXrttdcc5v/9739X/fr1dcstt0iSJkyYoO3bt2v58uXav3+/7r//fvXp00dHjhyxL//q7Va/fn2Xb4fr7fOCggINHDhQZ8+e1ebNm/X555/r+++/14MPPmgvs2bNGt17773q16+f9u7dq40bN6pjx47Fru/FF1/U1KlTtWHDBvXq1Uvp6ekaMmSIRo0apUOHDikpKUmDBg1y6r+Cd4WpU6cqISFBhw4dUps2bTRlyhR9/PHHWrp0qb7++mu1aNFCUVFRJX6/rzZ06FA1adJEu3bt0p49ezR16lRVr15d0uVjRZ8+fTR48GDt379f77//vr788ktNmDDBYRlXHx/mzp2rVatW6YMPPtDhw4f17rvvKjw8vMzt79GjhzZt2mQf37Rpk7p3765u3brZp2dnZ2vHjh3q0aOH8vLyNHPmTO3bt08rV65UamqqoqOjnV7fli1bNGLECP39739XSkqK3njjDSUmJur555+XJO3atUuStGTJEqWnp9vHXc3f31+5ubk39DucO3eu/Qpt4e+7NObMmaMuXbpo79696t+/v4YPH64RI0Zo2LBh+vrrr9W8eXONGDHC/htw9jtzo1xx3P/hhx/Ur18/dejQQfv27dOCBQv09ttv67nnnrN/Pj4+XsuWLdPChQt18OBBTZw4UcOGDdPmzZslSU8//bRSUlK0bt06HTp0SAsWLFDdunVL36BSx5tKwJkrK2fOnCkxdU6fPt0EBAQ4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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#plot count of cities by state\n",
        "\n",
        "plt.figure(figsize=(10,5))\n",
        "sns.countplot(data=data, x='ship-state')\n",
        "plt.xlabel('ship-state')\n",
        "plt.ylabel('Count')\n",
        "plt.title('Distribution by state')\n",
        "plt.xticks(rotational=90)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 690
        },
        "id": "mopcnCK5FXXh",
        "outputId": "bc7d72da-9a89-4e25-c3f7-30f6b3338197"
      },
      "execution_count": 82,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-82-e1a21c5a37ad>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcountplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'ship-state'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'ship-state'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Count'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Distribution by state'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: 'str' object is not callable"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#specific state\n",
        "\n",
        "top15=data['ship-state'].value_counts().head(15).astype(str)\n",
        "top15\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "owyGEQkPJm9I",
        "outputId": "1b6755ee-cb34-49d5-8f59-4f3ab68ddf4b"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MAHARASHTRA       1642\n",
              "KARNATAKA         1173\n",
              "UTTAR PRADESH      903\n",
              "TELANGANA          783\n",
              "TAMIL NADU         732\n",
              "DELHI              543\n",
              "KERALA             494\n",
              "WEST BENGAL        437\n",
              "Gujarat            352\n",
              "ANDHRA PRADESH     352\n",
              "HARYANA            344\n",
              "RAJASTHAN          231\n",
              "MADHYA PRADESH     225\n",
              "BIHAR              171\n",
              "ODISHA             168\n",
              "Name: ship-state, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,5))\n",
        "sns.countplot(data=data[data['ship-state'].isin(top15.index)], x='ship-state')\n",
        "plt.xlabel('ship-state')\n",
        "plt.ylabel('Count')\n",
        "plt.title('Distribution by state')\n",
        "plt.xticks(rotational=90)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 692
        },
        "id": "H9EfzT0LLpIP",
        "outputId": "c3650a73-1bbf-4ad2-825b-8f0a9602d531"
      },
      "execution_count": 86,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-86-8cdf406a9830>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcountplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'ship-state'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtop15\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'ship-state'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'ship-state'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Count'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Distribution by state'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: 'str' object is not callable"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "_i2bNEwHLv_-"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}